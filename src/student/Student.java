package student;

/**
 * Class to implement the student.Student object.
 * Holds a profile object, student.Major enum, and an integer.
 * Contains methods to override inherited methods from the Java objects and comparable classes.
 * Calculate the standing of a student.Student
 * @author Nikhil Agarwal, Hyeon Oh
 */
public class Student implements Comparable<Student>{
    private Profile profile;
    private Major major;
    private int creditCompleted;

    private static final int SOPHOMORE = 30;
    private static final int JUNIOR = 60;
    private static final int SENIOR = 90;

    /**
     * Constructor to initialize the student.Student Object.
     * @param profile student.Profile Object of student.Student.
     * @param major student.Major of the student.
     * @param creditCompleted the number of credits that a student has completed.
     */
    public Student(Profile profile,Major major, int creditCompleted){
        this.profile = profile;
        this.major = major;
        this.creditCompleted = creditCompleted;
    }

    /**
     * Override toString method from Java Objects class.
     * @return student.Student as a string in format: firstName lastName DoB (departmentCode student.Major Scool) creditsCompleted
     */
    @Override
    public String toString(){
        return profile.getFirstName() + " " + profile.getLastName() + " " + profile.getDate().toString() + " " + getCode_School(major) + " credits completed: " + creditCompleted + " " + getStanding(creditCompleted);
    }

    /**
     * Override equals method from Java Objects class.
     * @param obj object to be checked.
     * @return true if object equals student.Student, false if otherwise.
     */
    @Override
    public boolean equals(Object obj){
        Student student = (Student) obj;
        return student.profile.equals(profile);
    }

    /**
     * Override compareTo method from Java Comparable class.
     * Syntax: student1.compareTo(student2)
     * @param student the object to be compared.
     * @return positive if profile of student1 is lexicographically greater than student2, 0 if profiles are equal, negative otherwise.
     */
    @Override
    public int compareTo(Student student){
        return profile.compareTo(student.getProfile());
    }

    /**
     * Checks how many credits a student has completed and returns the standing of the student.
     * @param creditCompleted number of credits student has completed.
     * @return Freshman if creditsCompleted<30,
     *         Sophomore if 30<=creditsCompleted<60,
     *         Junior if 60<=creditsCompleted<90,
     *         Senior if creditsCompleted>=90
     */
    public String getStanding(int creditCompleted){
        if(creditCompleted<SOPHOMORE){
            return "(Freshman)";
        }else if(creditCompleted >= SOPHOMORE && creditCompleted < JUNIOR){
            return "(Sophomore)";
        }else if(creditCompleted >= JUNIOR && creditCompleted < SENIOR){
            return "(Junior)";
        }else{
            return "(Senior)";
        }
    }

    /**
     * Changes student.Major of student to a particular newMajor.
     * @param newMajor the major we want to set student.Major to.
     */
    public void changeMajor(Major newMajor){
        major = newMajor;
    }

    /**
     * @return student.Profile of our student (last name, first name, DoB)
     */
    public Profile getProfile(){
        return profile;
    }

    /**
     * @return student.Major of the student.
     */
    public Major getMajor(){
        return major;
    }

    /**
     * @return return number of Credits that the student has completed.
     */
    public int getCreditCompleted(){
        return creditCompleted;
    }

    /**
     * Checks to see if the student object is a valid student that can be added to our roster.
     * @return true if the student is valid to add to the roster, false otherwise.
     */
    public boolean isValid(){
        return profile.getDate().isValid() && profile.getDate().isValidAge() && creditCompleted >= 0 && major != null;
    }

    /**
     * Helper method to format output of the student.Major portion of our student object.
     * @param major major to be formatted to string.
     * @return String of formatted major. Ex: CS -> (01:198 CS SAS)
     */
    private String getCode_School(Major major){
        return "(" + major.getMajorCode() + " " + major + " " + major.getSchool() + ")";
    }

    /**
     * Used to test the test cases for the isValid method of the student.Date class
     * @param actualOutput the output generated by calling the isValid method
     * @param expectedOutput the correct output based off of the test case date
     */
    private static void testResult(int actualOutput, int expectedOutput)
    {
        if(actualOutput == expectedOutput)
        {
            System.out.println("The output should be " + expectedOutput + ". compareTo gave us " + actualOutput +  ". compareTo method has successfully passed the test case.");
        }
        else
        {
            System.out.println("The output should be " + expectedOutput + ". compareTo gave us " + actualOutput +  ". compareTo method has failed the test case.");
        }
    }

    /**
     * Testbed main to test the compareTo method for the student.Student class
     * @param args command line arguments
     */
    public static void main(String[] args)
    {
        Date date = new Date("9/21/1999");
        Profile profile = new Profile("Garcia", "Emily", date);
        Major major = Major.CS;
        Student student = new Student(profile, major, SENIOR);

        Date date2 = new Date("9/21/1999");
        Profile profile2 = new Profile("Bojan", "Bob", date2);
        Major major2 = Major.CS;
        Student student2 = new Student(profile2, major2, SOPHOMORE);
        int expectedOutput = 5;
        int actualOutput = student.compareTo(student2);
        System.out.println(actualOutput);
        System.out.println("** Test case #1: Since Emily's last name Garcia is lexicographically higher than Bob's last name Bojan, output should be positive.");
        testResult(actualOutput, expectedOutput);

        date = new Date("9/21/1999");
        profile = new Profile("Bojan", "Bob", date);
        major = Major.CS;
        student = new Student(profile, major, SENIOR);

        date2 = new Date("9/21/1999");
        profile2 = new Profile("Garcia", "Emily", date2);
        major2 = Major.CS;
        student2 = new Student(profile2, major2, SENIOR);
        expectedOutput = -5;
        actualOutput = student.compareTo(student2);
        System.out.println(actualOutput);
        System.out.println("** Test case #2: Since Bob's last name Bojan is lexicographically lower than Emily, the output should be negative.");
        testResult(actualOutput, expectedOutput);

        date = new Date("9/21/1999");
        profile = new Profile("Smith", "Abigail", date);
        major = Major.CS;
        student = new Student(profile, major, SOPHOMORE);

        date2 = new Date("9/21/1999");
        profile2 = new Profile("Smith", "John", date2);
        major2 = Major.CS;
        student2 = new Student(profile2, major2, JUNIOR);
        expectedOutput = -9;
        actualOutput = student.compareTo(student2);
        System.out.println(actualOutput);
        System.out.println("** Test case #3: If both last names are the same, it will then compare first name, since Abigail is lexicographically lower than John, the output should be negative.");
        testResult(actualOutput, expectedOutput);

        date = new Date("9/21/1999");
        profile = new Profile("Smith", "John", date);
        major = Major.CS;
        student = new Student(profile, major, SOPHOMORE);

        date2 = new Date("9/21/1995");
        profile2 = new Profile("Smith", "John", date2);
        major2 = Major.CS;
        student2 = new Student(profile2, major2, JUNIOR);
        expectedOutput = 1;
        actualOutput = student.compareTo(student2);
        System.out.println(actualOutput);
        System.out.println("** Test case #4: If both last and first names are the same, it will compare date of birth. Since the first student was born in 1999 and the second student was born in 1995, 1999 is more recent so the output should be 1.");
        testResult(actualOutput, expectedOutput);

        date = new Date("9/21/1999");
        profile = new Profile("Smith", "John", date);
        major = Major.CS;
        student = new Student(profile, major, SOPHOMORE);

        date2 = new Date("9/21/1999");
        profile2 = new Profile("Smith", "John", date2);
        major2 = Major.CS;
        student2 = new Student(profile2, major2, JUNIOR);
        expectedOutput = 0;
        actualOutput = student.compareTo(student2);
        System.out.println(actualOutput);
        System.out.println("** Test case #5: If last and first name are the same and date of birth is also the same, the output should be 0.");
        testResult(actualOutput, expectedOutput);
    }
}
